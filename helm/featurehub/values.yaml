# Default values for featurehub.
# This is a YAML-formatted file.

nameOverride: ""
fullnameOverride: ""
podAnnotations: {}


# global sections are normally reserved for cross application configuration, where multiple apps are in the repository,
# we should generally not use this section
global:
  # -- the default url path is to mount as root, this lets you mount where ever you like, but it affects the health checks
  urlPath: ""

  # -- if set to true, then MR will serve the intranet version of the application which does not require external
  # HTML dependencies
  intranet: false

  # -- Environment variables to be exposed to Management Repository, Edge and Dacha deployments.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case.
  # Entries accepted here are the same as would be specified in /etc/app-config/common.properties.
  environmentVars:
    nats.urls: "nats://featurehub-nats"

  # -- Name of the secret containing secret properties, to be exposed as environment variables to
  # Management Repository, Edge and Dacha deployments. Create the secret in advance, then reference it here.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case
  # Entries of the secret specified here are the same as would be specified in /etc/app-config/secrets.properties
  envFromSecret: ""

  # This is only used for the short-cut KinD ingress, you would not use this in your own cluster
  ingress:
    enabled: true
    annotations: []
    # -- specify the ingress class name if thats what makes yor ingress work. E.g. in AWS its "alb"
    ingressClassName: ""

  # -- If `true`, entries from `environmentVars` will be mapped to /etc/app-config/common.properties file
  # To mount secret settings as /etc/app-config/common.properties see volume fields
  # Used for retrocompatiblity with FeatureHub controller versions lower than 1.5.0
  # https://docs.featurehub.io/featurehub/latest/installation.html#_run_configuration
  envAsApplicationProperties: true

  # -- Extra environment variables to be exposed to Management Repository, Edge and Dacha deployments.
  # In terms of environment variable setting, this is the same as `environmentVars` field. The only difference
  # is that if `envAsAppConfigFile: true`, only entries from `environmentVars` will be mapped to the
  # common.properties configuration file, and not the ones from `extraEnvironmentVars`.
  extraEnvironmentVars: {}

  # -- List of extra mounts to add to Management Repository Deployment
  extraVolumeMounts: []
    # - mountPath: /etc/app-config/secrets.properties
    #   name: secrets-properties
    #   subPath: secrets.properties

  # -- List of extra volumes to add to Management Repository Deployment
  extraVolumes: []
    # - name: secrets-properties
    #  secret:
    #    secretName: featurehub-management-repository-secrets-properties
    #    items:
    #      - key: secrets.properties
    #        path: secrets.properties

  extraCommonConfigFiles:
    - configMapSuffix: log4j2-xml
      fileName: log4j2.xml
      content: |-
        <Configuration packages="cd.connect.logging" monitorInterval="30" verbose="true">
           <Appenders>
             <Console name="STDOUT" target="SYSTEM_OUT">
               <ConnectJsonLayout/>
             </Console>
           </Appenders>

           <Loggers>
             <AsyncLogger name="io.featurehub" level="debug"/>
             <!--
             <AsyncLogger name="io.ebean.SQL" level="trace"/>
             <AsyncLogger name="io.ebean.TXN" level="trace"/>
             <AsyncLogger name="io.ebean.SUM" level="trace"/>
             <AsyncLogger name="io.ebean.DDL" level="trace"/>
             <AsyncLogger name="io.ebean.cache.QUERY" level="trace"/>
             <AsyncLogger name="io.ebean.cache.BEAN" level="trace"/>
             <AsyncLogger name="io.ebean.cache.COLL" level="trace"/>
             <AsyncLogger name="io.ebean.cache.NATKEY" level="trace"/>

             <AsyncLogger name="jersey-logging" level="trace"/>
             <AsyncLogger name="io.featurehub.db" level="trace"/>
             -->
             <AsyncLogger name="io.featurehub.edge.features" level="debug"/>

           <AsyncLogger name="net.stickycode" level="warn"/>
           <AsyncLogger name="org.glassfish.jersey.server.wadl" level="error"/>
           <AsyncLogger name="io.avaje.config"  level="warn"/>
           <AsyncLogger name="org.hibernate" level="error"/>


           <AsyncRoot level="info">
               <AppenderRef ref="STDOUT"/>
             </AsyncRoot>
           </Loggers>
        </Configuration>

managementRepository:
  # -- do you want to run the Management Repository?
  enabled: true

  # -- how many copies
  replicaCount: 1

  strategy: {}
    # type: RollingUpdate

  image:
    repository: featurehub/mr
    tag: ""

  pullPolicy: IfNotPresent

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- this allows you to override the values of the liveness probe for MR
  livenessProbe:
    initialDelaySeconds: 20
    periodSeconds: 20
    failureThreshold: 2
    timeoutSeconds: 3
    httpGet:
      path: "/health/liveness"
      port: metrics

  # -- this allows you to override the readiness probe
  readinessProbe:
    initialDelaySeconds: 20
    periodSeconds: 20
    successThreshold: 2
    failureThreshold: 2
    timeoutSeconds: 3
    httpGet:
      path: "/health/readiness"
      port: metrics


  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}

  initContainers: {}

  # -- Environment variables to be exposed to management-repository deployment.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case.
  # Entries accepted here are the same as would be specified in /etc/app-config/applications.properties.
  # Note that `server.port` and `monitor.port` use their default values of `8085` and `8701` respectively, to make
  # it easier to implement the deployment, service and the prometheus serviceMonitor manifests.
  environmentVars:
    # -- the connection string. Google CloudSQL libraries are included for Postgres and MySQL
    db.url: jdbc:postgresql://featurehub-postgresql:5432/featurehub
    # -- the Database's Username
    db.username: featurehub
    # -- normally you would not want this, but its for the example postgres
    db.password: featurehub
    # -- the maximum number of database connections that will be allowed
    db.connections: "20"
    # -- when a Portfolio Admin group is created, this is added to the name of the portfolio. Change for a different language
    portfolio.admin.group.suffix: Administrators

  # -- If `true`, entries from `environmentVars` will be mapped to /etc/app-config/application.properties file
  # To mount secret settings as /etc/app-config/application.properties see volume fields
  # Used for retrocompatiblity with FeatureHub controller versions lower than 1.5.0
  # https://docs.featurehub.io/featurehub/latest/installation.html#_run_configuration
  envAsApplicationProperties: true

  # -- Extra environment variables to be exposed to management-repository deployment.
  # In terms of environment variable setting, this is the same as `environmentVars` field. The only difference
  # is that if `envAsAppConfigFile: true`, only entries from `environmentVars` will be mapped to the
  # application.properties configuration file, and not the ones from `extraEnvironmentVars`.
  extraEnvironmentVars: {}

  # -- Name of the secret containing secret properties, to be exposed as environment variables to
  # edge deployment. Create the secret in advance, then reference it here.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case
  # Entries of the secret specified here are the same as would be specified in /etc/app-config/secrets.properties
  envFromSecret: ""

  # -- Prometheus configuration
  prometheus:
    # -- Whether to enable or disable prometheus metrics endpoints, and serviceMonitor
    # If enabled, metrics are exposed on port 8701, on /metrics endpoint
    enabled: false
    # -- Labels for the Prometheus Operator to handle the serviceMonitor
    labels: {}

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts: []
# - localhost
#        paths:
#          - path: /mr-api
#            pathType: Prefix
#          - path: /oauth
#            pathType: Prefix
#          - path: /saml
#            pathType: Prefix
#          - path: /assets
#            pathType: Prefix
#          - path: /canvaskit
#            pathType: Prefix
#          - path: .map
#            pathType: Suffix
#          - path: .ico
#            pathType: Suffix
#          - path: .html
#            pathType: Suffix
#          - path: .js
#            pathType: Suffix
#          - path: .json
#            pathType: Suffix
    tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

  imagePullSecrets: []

  podAnnotations: {}

  # Define a Pod Disruption Budget for the management-repository deployment
  # ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  podDisruptionBudget:
    enabled: true
    maxUnavailable: 1
    # minAvailable: 1

  podSecurityContext:
    fsGroup: 999

  securityContext:
    runAsNonRoot: true
    runAsUser: 999
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true

  # -- List of extra containers to add to Management Repository Pod
  extraContainers: []
    # - name: do-something
    #  image: busybox
    #  command: ['do', 'something']

  # If desired to mount /etc/app-config/secrets.properties as a file. First create the secret with a key
  # named `secrets.properties` (key name must be that one), then add the corresponding entries to
  # extraVolumeMounts and extraVolumes
  #
  # -- List of extra mounts to add to Management Repository Deployment
  extraVolumeMounts: []
    # - mountPath: /etc/app-config/secrets.properties
    #  name: secrets-properties
    #  subPath: secrets.properties

  # -- List of extra volumes to add to Management Repository Deployment
  extraVolumes: []
    # - name: secrets-properties
    #  secret:
    #    secretName: featurehub-management-repository-secrets-properties
    #    items:
    #      - key: secrets.properties
    #        path: secrets.properties

edge:
  enabled: true

  replicaCount: 2

  strategy: {}
    # type: RollingUpdate

  image:
    repository: featurehub/edge
    tag: ""

  pullPolicy: IfNotPresent

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # -- If `true`, entries from `environmentVars` will be mapped to /etc/app-config/application.properties file
  # To mount secret settings as /etc/app-config/application.properties see volume fields
  # Used for retrocompatiblity with FeatureHub controller versions lower than 1.5.0
  # https://docs.featurehub.io/featurehub/latest/installation.html#_run_configuration
  envAsApplicationProperties: true

  # -- Environment variables to be exposed to edge deployment.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case.
  # Entries accepted here are the same as would be specified in /etc/app-config/applications.properties.
  # Note that `server.port` and `monitor.port` use their default values of `8085` and `8701` respectively, to make
  # it easier to implement the deployment, service and the prometheus serviceMonitor manifests.
  environmentVars:
    # -- how long SSE connections are allowed to connect for
    maxSlots: "30"
    # -- thread pool for updates
    update.pool-size: "30"
    # -- thread pool for processing incoming requests. Does not reflect number of clients
    listen.pool-size: "30"
    # -- how long to wait for connections to complete before shutting server down
    server.gracePeriodInSeconds: "10"
    # -- the location of your dacha service, along with the port
    dacha.url.default: http://featurehub-dacha:8600
    # -- this should reflect the sizing/capability of your database to respond to the 1st time a key is requested
    dacha.timeout.read: "12000"


  # -- If `true`, entries from `environmentVars` and `envFromSecret` fields will be mapped to configuration files.
  # `environmentVars` to /etc/app-config/application.properties
  # `envFromSecret` to /etc/app-config/secrets.properties
  # Used for retrocompatiblity with FeatureHub controller versions lower than 1.5.0
  # https://docs.featurehub.io/featurehub/latest/installation.html#_run_configuration
  envAsAppConfigFile: true

  # -- Extra environment variables to be exposed to edge deployment.
  # In terms of environment variable setting, this is the same as `environmentVars` field. The only difference
  # is that if `envAsAppConfigFile: true`, only entries from `environmentVars` will be mapped to the
  # application.properties configuration file, and not the ones from `extraEnvironmentVars`.
  extraEnvironmentVars: {}

  # -- Name of the secret containing secret properties, to be exposed as environment variables to
  # edge deployment. Create the secret in advance, then reference it here.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case
  # Entries of the secret specified here are the same as would be specified in /etc/app-config/secrets.properties
  envFromSecret: ""

  # -- Prometheus configuration
  prometheus:
    # -- Whether to enable or disable prometheus metrics endpoints, and serviceMonitor
    # If enabled, metrics are exposed on port 8701, on /metrics endpoint
    enabled: false
    # -- Labels for the Prometheus Operator to handle the serviceMonitor
    labels: {}

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts: []
     # - host: "localhost"
     #   paths:
     #   - path: /features
     #     pathType: Prefix
    tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

  imagePullSecrets: []

  podAnnotations: {}

  # Define a Pod Disruption Budget for the edge deployment
  # ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  podDisruptionBudget:
    enabled: true
    maxUnavailable: 1
    # minAvailable: 1

  podSecurityContext:
    fsGroup: 999

  securityContext:
    runAsNonRoot: true
    runAsUser: 999
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true

  # -- List of extra containers to add to Edge Pod
  extraContainers: []
    # - name: do-something
    #  image: busybox
    #  command: ['do', 'something']

  # -- List of extra mounts to add to Edge Deployment
  extraVolumeMounts: []
    # - mountPath: /tmp/foobar
    #  name: foobar

  # -- List of extra volumes to add to Edge Deployment
  extraVolumes: []
    # - name: foobar
    #  emptyDir: {}


dacha:
  enabled: true

  replicaCount: 2

  strategy: {}
    # type: RollingUpdate

  # -- If `true`, entries from `environmentVars` will be mapped to /etc/app-config/application.properties file
  # To mount secret settings as /etc/app-config/application.properties see volume fields
  # Used for retrocompatiblity with FeatureHub controller versions lower than 1.5.0
  # https://docs.featurehub.io/featurehub/latest/installation.html#_run_configuration
  envAsApplicationProperties: true

  image:
    repository: featurehub/dacha2
    tag: ""

  pullPolicy: IfNotPresent

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # -- Environment variables to be exposed to dacha deployment.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case.
  # Entries accepted here are the same as would be specified in /etc/app-config/applications.properties.
  # Note that `server.port` and `monitor.port` use their default values of `8085` and `8701` respectively, to make
  # it easier to implement the deployment, service and the prometheus serviceMonitor manifests.
  environmentVars:
    # --  thread pool size for processing cache updates
    cache.pool-size: "10"
    # --  Dacha2 calls MR via the Management API to avoid public internet traffic (by default)
    management-repository.url: "http://featurehub-management-repository:8701"

  # -- If `true`, entries from `environmentVars` and `envFromSecret` fields will be mapped to configuration files.
  # `environmentVars` to /etc/app-config/application.properties
  # `envFromSecret` to /etc/app-config/secrets.properties
  # Used for retrocompatiblity with FeatureHub controller versions lower than 1.5.0
  # https://docs.featurehub.io/featurehub/latest/installation.html#_run_configuration
  envAsAppConfigFile: true

  # -- Extra environment variables to be exposed to dacha deployment.
  # In terms of environment variable setting, this is the same as `environmentVars` field. The only difference
  # is that if `envAsAppConfigFile: true`, only entries from `environmentVars` will be mapped to the
  # application.properties configuration file, and not the ones from `extraEnvironmentVars`.
  extraEnvironmentVars: {}

  # -- Name of the secret containing secret properties, to be exposed as environment variables to
  # dacha deployment. Create the secret in advance, then reference it here.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case
  # Entries of the secret specified here are the same as would be specified in /etc/app-config/secrets.properties
  envFromSecret: ""

  # -- Prometheus configuration
  prometheus:
    # -- Whether to enable or disable prometheus metrics endpoints, and serviceMonitor
    # If enabled, metrics are exposed on port 8701, on /metrics endpoint
    enabled: false
    # -- Labels for the Prometheus Operator to handle the serviceMonitor
    labels: {}

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts: []
      #  - host: chart-example.local
      #    paths:
      #      - path: /
      #        pathType: ImplementationSpecific
    tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

  imagePullSecrets: []

  podAnnotations: {}

  # Define a Pod Disruption Budget for the dacha deployment
  # ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  podDisruptionBudget:
    enabled: true
    maxUnavailable: 1
    # minAvailable: 1

  podSecurityContext:
    fsGroup: 999

  securityContext:
    runAsNonRoot: true
    runAsUser: 999
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true

  # -- List of extra containers to add to Dacha Pod
  extraContainers: []
    # - name: do-something
    #  image: busybox
    #  command: ['do', 'something']

  # -- List of extra mounts to add to Dacha Deployment
  extraVolumeMounts: []
    # - mountPath: /tmp/foobar
    #  name: foobar

  # -- List of extra volumes to add to Dacha Deployment
  extraVolumes: []
    # - name: foobar
    #  emptyDir: {}

googlepubsub:
  # -- whether to enable chart for using Google PubSub
  enabled: false
  # -- how long to backoff when failing to process a request from an incoming subscription
  backOffInSeconds: 20
  # -- is the pubsub implementation a copy of the Docker emulator
  emulator:
    enabled: true
    host: "pubsub-emulator:8075"
  project: featurehub
  # -- feed these from something like Terraform, Pulumi or a Crossplane XRD. For more details see [PubSub config docs](https://docs.featurehub.io/featurehub/latest/configuration.html#_googles_pubsub)
  channels:
    featureEnricher:
      description: "This channel is used for the initial enriched events. It is a queue."
      # -- MR publishes this.
      topicName: "enricher-updates-sub"
      # -- dacha is listening to this
      subscription: "enricher-updates-sub"
    featureWebhook:
      description: "dacha broadcasts to the topic, edge listens"
      topicName: "featurehub-enriched-events-webhooks"
      subscription: "featurehub-enriched-events"
    featureChangeMessage:
      description: "this is issued when a feature has changed, it is a complex diff message. It may or may not be enabled"
      topicName: "featurehub-messaging-channel"
    mrdacha:
      topicName: "featurehub-mr-dacha2"
      # this is the prefix name used for the dynamically created subscription for Dacha
      dachaPrefix: "featurehub-dacha2-listener"
    mredge:
      topicName: "featurehub-mr-edge"
      # this is the prefix name used for the dynamically created subscription for Edge
      edgePrefix: "featurehub-edge-listener"
    edgemr:
      description: "Updates from Edge are published through this channel and picked up by MR"
      topicName: "featurehub-edge-updates"
      # MR listens to these updates from Edge
      subscription: "enricher-updates-sub"
    stats:
      topicName: "featurehub-stats"
    enrichedEvents:
      topicName: "enriched-feature-data"

# ------------------------------------------------------------------------------- #
# NATS Helm Chart from Bitnami
# Documentation: https://github.com/nats-io/k8s/tree/main/helm/charts/nats
# ------------------------------------------------------------------------------- #
nats:
  enabled: true
  cluster:
    enabled: true
    name: featurehub
    replicas: 3
  topologyKeys: []

# ------------------------------------------------------------------------------- #
# PostgreSQL Helm Chart from Bitnami:
# Documentation: https://github.com/bitnami/charts/tree/master/bitnami/postgresql
# ------------------------------------------------------------------------------- #
postgresql:
  # Enabled by default just to make it easy to start working with the Chart. This is not
  # a hard requirement, as you may want to deploy the postgresql in a different way, as
  # a separate Helm Chart, use an existing one, deploy it to RDS, etc.
  enabled: true
  global:
    postgresql:
      auth:
        postgresPassword: postgresql
  primary:
    persistence:
      enabled: true
      storageClassName: standard
      accessModes:
        - ReadWriteOnce
      size: 128Mi
    initdb:
      scripts:
        # strongly recommended ensuring that the values in this init script
        # match the ones set in .Values.db
        featurehub.sql: |-
          CREATE USER featurehub PASSWORD 'featurehub' LOGIN;
          CREATE DATABASE featurehub;
          GRANT ALL PRIVILEGES ON DATABASE featurehub TO featurehub;
          \connect featurehub
          GRANT ALL ON SCHEMA public TO featurehub;
